\input texinfo @c -*- texinfo -*-

@c ==================================================
@c NAME:    nodeWithReact.twjr
@c DATE:    2017-12-26T15:52:00
@c VERSION: VERSION 0.0.10
@c DESC:    Udemy Node With React---Fullstack Web Development V4
@c BY:      LOLH
@c NOTES:   
@c ==================================================

@c %**start of header
@c edit
@setfilename nodeWithReact.info
@c edit
@settitle Node With React
@c %**end of header

@c ====================
@c texiwebjr specials
@c ====================
@c Changes how xref titles are quoted.
@dquotexrefs

@c Lets braces in index entries work.
@allowindexbraces

@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c ====================
@c DOCUMENT CONSTANTS
@c ====================
@set UPDATE-MONTH DECEMBER, 2017
@set EDITION 0.0.10
@set AUTHOR LOLH
@set TITLE Notes for Node with React---Fullstack Web Development V4
@set SHORTTITLE Node with React
@set SUBTITLE by Stephen Grider
@set COPYRIGHT_YEAR 2017
@set COPYRIGHT_HOLDER LOLH

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook

@c ====================
@c FINALOUT
@c ====================
@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c |@finalout|
@end iftex

@c ====================
@c SUMMARY & COPYRIGHT INFORMATION
@c ====================
@copying
@c insert a short summary describing and identifying this document in a
@c sentence or two, and add the copyright notice and copying permisions

This document is @value{TITLE} @sp 2
This document does @dots{}

Copyright @copyright{} @value{COPYRIGHT_YEAR} LOLH @*
by @value{COPYRIGHT_HOLDER} @*
All Rights Reserved

@quotation
Permission is granted to @dots{}
@end quotation

@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.

@c use @insertcopying later to 'emit' this copying information in a TeX
@c or plain text document; add to the Top node for use in Info or HTML file
@end copying

@c ====================
@c TITLEPAGE, COPYRIGHT PAGE, TOC PAGE, HEADINGS
@c ====================
@titlepage

@title @value{TITLE}
@subtitle @value{SUBTITLE}
@c @subtitle Additional Subtitle
@author @value{AUTHOR}

@c place the copyright information on the backside of the titlepage
@c (printed manual only)
@page
@vskip 0pt plus 1filll
@insertcopying

Published by @dots{}

@end titlepage
@c page numbering and headings start after end of titlepage

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@c TOC in the printed manual
@c consider placing TOC after the main menu
@c consider including summarycontents here or after main menu
@c @summarycontents
@contents

@c ====================
@c TOP NODE, MASTER MENU
@c ====================
@ifnottex
@ifnotdocbook
@ifnotxml
@node Top
@top Node With React

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex

@c ====================
@c START OF BODY
@c ====================

@c Preface and Foreward come right after Top node in 'unnumbered' sections
@c consider commenting out Foreward and Preface
@menu

@detailmenu
 --- The Detailed Node Listing ---

@end detailmenu
@end menu

@node Foreword
@unnumbered Foreword

Foreward text...

@node Preface
@unnumbered Preface

Preface text...

@node Overview
@unnumberedsec Overview

Text and chapter by chapter description here.

@node Conventions
@unnumberedsec Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo

@node Acknowledgements
@unnumberedsec Acknowledgements

Acknowledgments here...

@c ====================
@c MAIN BODY NODES
@c ====================

@node Introduction
@unnumbered Introduction

Build and deploy fullstack web apps with NodeJS, React, Redux, Express, and MongoDB.

Course website: @url{https://www.udemy.com/node-with-react-fullstack-web-development/learn/v4/content}

@node About
@unnumberedsec About This Course

Build and deploy fullstack web apps with NodeJS, React, Redux, Express,
and MongoDB.

195 Lectures

25.5 hours of video

@node Description
@unnumberedsec Course Description

Note: This course assumes you've got the basics of React and Redux down.
Check out my course 'Modern React with Redux', its the perfect
preparation!

Go beyond the basics of React and Redux!  This course will teach you to
combine the ultra-popular React, Redux, Express, and MongoDB
technologies to build a fullstack web application.

Advanced Deployment? You will learn it.  Billing/Payments? Included.
Handling Email? Of course!

@subsubheading What Will You Build?

All of my courses are 'learn-by-doing': no boring endless lectures with
Powerpoints, only live, interactive coding examples.  In this course
we'll build one massive web application that profiles the advanced
features of React, Redux, Express, and Mongo.  By putting each concept
into a real app, you'll get a better idea of when to use each unique and
powerful feature.

Build a large feedback-collection app. This mega app will include the
full gamut of features, including everything from authentication to
email handling.  You'll learn how to build an app that can be used to
send mass emails to a big list of users for the purpose of collecting
feedback.  It's my goal to ensure you understand each feature we build
into this app so you can apply them to your own personal or professional
projects in the future.

@subsubheading Here's what we'll learn

@itemize
@item
Learn the architectural considerations of building a full stack app

@item
Connect a front-end Create-React-App server to a NodeJS and Express
backend

@item
Communicate data from your Mongo database to your React application

@item
Understand how to route user requests on the front end with React Router
and on the backend with Express

@item
Build reusable user inputs with Redux Form, complete with navigation

@item
Handle credit cards and receive payments from your users with Stripe

@item
Engage your users with automated emails

@item
Enhance authentication flows in your app with Google OAuth
authentication

@item
Separate production and development resources with advanced API key
handling techniques

@item
Educate your users on how to use your app with custom build landing
pages

@end itemize

I've built the course that I would have wanted to take when I was
learning to build fullstack apps. A course that explains the concepts
and how they're implemented in the best order for you to learn and
deeply understand them.

@subsubheading What am I going to get from this course?

@itemize
@item
Create boilerplate starter projects with React, Redux, Express, and
Mongo

@item
Understand common web technologies and design patterns to connect them
together

@item
Master deployment techniques between the production and development
environments

@item
Make an app with Google OAuth authentication

@item
Learn to effectively create and send emails from a backend server

Accept and process credit card payments from users
@end itemize

@node Course Overview
@chapter Course Overview
@cindex overview

Course Overview

NodeJS version must be at least version 8.1.1.

@node Help
@section How to Get Help
@cindex help

@enumerate
@item
Udemy Discussion Threads

@item
PM Stephen Grider on Udemy

@item
Twitter @url{https://twitter.com/ste_grider}

@item
Official Course Repo GitHub
@enumerate a
@item
@url{https://github.com/StephenGrider/FullstackReactCode/issues}

@item
Poor notifications; use PM or Tweet as well
@end enumerate

@end enumerate

@node Resources
@section Course Resources Document
@cindex resources document

@subheading Course Resources Documents

@url{https://goo.gl/Xv4ZgB}

@subheading Course Diagrams

Can view all course diagrams at GitHub site:

@url{https://github.com/StephenGrider/FullstackReactCode/tree/master/diagrams}

All diagrams are authored by @url{https:www.draw.io/, Draw IO}

@subsubheading How to edit diagrams on own:

@itemize
@item
Go to above GitHub site

@item
open folder containing set of diagrams you want to edit

@item
click on @file{.xml} file

@item
click on @samp{raw} button

@item
copy the URL

@item
go to @url{https://www.draw.io}

@item
on the @samp{Save Diagrams To...} window click @key{Decide later} at the
bottom

@item
click @key{File} @result{} @samp{Import From} @result{} @samp{URL}

@item
paste the link to the XML file
@end itemize


@node Prettier
@section Prettier Setup
@cindex prettier

Optional editor add-on to auto-format your JS code.

@url{https://github.com/prettier/prettier}

@subheading Prettier-js for Emacs

@url{https://github.com/prettier/prettier-emacs}

@file{prettier-js} is a function that formats the current buffer using
@file{prettier}. The package also exports a minor mode that applies
@code{(prettier-js}) on save.

Go to the above web page to review @slanted{configuration}.

@node App Overview
@section App Overview
@cindex overview, app

@heading Feedback Collection Application

marketed to startup owners and product managers.

@subheading Hypothetical Situation

@itemize
@item
Someone uses startup owner's app/service

@item
Startup owner wants feedback

@item
Send customer an email requesting feedback

@item
Get tabulation of results

@item
Make app/server better with feedback
@end itemize

It will be quite diverse in its feature set.  It will send out a lot of
emails to different people.  There should be some kind of billing
feature.  There would also need to be user accounts as well, which
requires authentication.

@node App User Flow
@section App User Flow Walkthrough
@cindex app user flow
@cindex user flow, app

Here is a detailed walk-through of how a use will make use of the
application and a discussion of all the different technologies that will
need to be incorporated into the application.

@enumerate
@item
User signs up via Google OAuth

@item
User pays for email credits via stripe

@item
User creates a new 'campaign'

@item
User enters list of emails to send survey to

@item
We send emails to list of surveyees

@item
Surveyees click on link in email to provide feedback

@item
We tabulate feedback

@item
User can see report of all survey responses
@end enumerate

@node Tech Stack
@section Tech Stack
@cindex tech stack
@cindex stack, tech

@enumerate
@item
Authentication:  Express server + MongoDB + PasportJS

@item
Payment: Stripe + MongoDB

@item
Campaign: React + Redux + Redux Form

@item
Emails: Email provider

@item
Feedback: Email provider, Express, Mongo

@item
Tabulate Feedback: Mongo

@item
Report: Mongo + React + Redux
@end enumerate

@node App Mockups
@section App Mockups
@cindex mockups, app
@cindex app mockups

@enumerate
@item
Landing Page; app called @samp{Emaily}; will have a Login button, and
some text; not too concerned about styling; focus on functionality.

@item
Login Button: OAuth flow

@item
Results screen of all different campaigns; name of campaign; list of
responses; other buttons for payment;

@item
Credit card payment

@item
Create a new survey (campaign); add information

@item
Review input information; submit
@end enumerate

@node Server
@chapter Server Side Architecture
@cindex server side architecture
@cindex architecture, server

Discussion about @i{how} to write the code to make the application.

Discussion about the tech stack that will be built and how they will all
communicate with each other.  Primary concern of this course is to
provide direction on getting all of these technologies to work
together.  

@node Application Architecture
@section Application Architecture
@cindex architecture, application
@cindex React app
@cindex Mongo database
@cindex Express server
@cindex API
@cindex AJAX
@cindex JSON

@itemize
@item
Browser at domain sends browseree an HTML document and some files that
contain a React application.

@item
React application does not have the data; the data will be stored on a
Mongo database, i.e., surveys and results of surveys.  The problem to be
solved will be how to get the data in the Mongo database into the React
application.

@item
The React app will never communicate directly with MongoDB; instead,
there will be an Express API in between the React app and the Mongo
database.  The API takes in requests from the app, pulls information out
of the database, and sends it to the app.

@item
React and Express communicate solely through HTTP requests (AJAX
requests); each request contains some JSON.

@itemize
@item
React App

@item
HTTP Request/Response

@item
Express/Node API

@item
MongoDB
@end itemize
@end itemize

Will start with the Express Server first.

@node Node and Express
@section Relationship Between Node and Express
@cindex node and express
@cindex express and node

@set PROJECT server

Will start a brand new Node project directory and install Express into
it, and then discuss the differences between Node and Express inside the
project.  The new project directory will be @file{@value{PROJECT}}.  NPM
will create a new @file{package.json} file in the project directory
through the @code{npm init --yes} command.

@node Install Node Project With Express
@subsection Install a New Node Project With Express
@cindex install node project
@cindex node project, install
@cindex express node project

@itemize
@item
Create project directory @file{@value{PROJECT}}

@<Makefile Root Definition@>=
ROOT := server

@

@item
Initialize new Node Project: @code{npm init --yes}

@item
Install @file{express}

@<Makefile NPM Install Hook@>=
	cd ${ROOT} && npm install express
@

@end itemize

@node Relationship Between Node and Express
@subsection Relationship Between Node and Express Inside the App
@cindex node and express, relationship
@cindex express and node, relationship
@cindex relationship between node and express

@table @code
@item Node
Javascript runtime used to execute code outside of the browswer;
traditionally, JavaScript code has always been executed inside a web
browser; that is how JavaScript got its start; people wanted to execute
JavaScript code outside the browswer in some other environments; Node
makes that possible.

@item Express
Library that runs in the Node runtime; has helpers (functions) to make
dealing with HTTP traffic easier;
@end table

@subheading How Node and Express Work Together
@cindex port
@cindex HTTP requests
@cindex HTTP responses
@cindex requests
@cindex reponses
@cindex route handlers
@cindex Route Handler

When a server is running, it is looking for HTTP traffic coming in on a
particular @dfn{port}, a door through which HTTP requests can be
routed.  Node listens for traffic on a particular port and then takes
that information and hands it off to @file{express} for help.  Node
actually handles all of the underlying HTTP traffic.

@file{express} then looks at the @dfn{request} and decides what part of
its code will @dfn{handle} or respond to that request.  The coder will
write a collection of @dfn{route handlers} to handle HTTP requests that
are asking for a very particular service.

@itemize
@item
Route Handler #1

@item
Route Handler #2

@item
Route Handler #3
@end itemize

These route handlers then send a @dfn{response} back to Node, and Node
will respond to the incoming HTTP request.

@node Express Apps
@section Generating Express Apps
@cindex express apps
@cindex index.js

Create the root file @file{index.js} in the root directory of the
project: @value{PROJECT}

Import @file{express} library, then create an @samp{application} by
executing the @file{express} code.  That is, inside of a single Node.js
project, there might be several different @file{express} applications.
Executing @file{express} as a function returns a running express app
referenced by the @var{app} variable.

@var{app} is used to set up configuration to listen for incoming HTTP
requests that are being routed from Node to @file{express} and will then
route those requests to different route handlers.  The route handlers
will be associated with the @file{express} @var{app} that we create here.

@(index0.js@)=
@<Index0JS Requirements@>
@<Index0JS Constant Definitions@>
@<Create App@>
@<Create Initial Route Handlers@>
@<Start App@>
@

@<Index0JS Requirements@>=
/*********************
  REQUIREMENTS
 *********************/
@<Import Express@>
@

@<Create App@>=

/*********************
  APPLICATION
 *********************/
const app = express();
@

This code tells Node that the application wants to receive requests
coming in from port 5000.

@<Start App@>=

/*********************
  START SERVER
 *********************/
app.listen(PORT);
@

@subheading Create the first Route Handler in @var{app}
@<Create Initial Route Handlers@>=
@<Create Route Handlers@>
@

@<Create Route Handlers@>=
/*********************
  ROUTE HANDLERS
 *********************/
@<Root Route Handler@>
@

@<Root Route Handler@>=
app.get('/', (req, res) => {
  res.send({"hi": "there"});
});
@

@node Express
@subsection Express
@cindex express

Will be using @dfn{common js modules} on the server side because at this
time Node only has support for this, and not @dfn{ES2015} modules using
the @code{import @dots{} from <module>} syntax.  The front end (React
side), we can use @samp{ES2015} modules, however.

@<Import Express@>=
const express = require('express');
@

@node Index JS Constants
@subsection @file{index.js} Constant Definitions
@cindex constant definitions

@<Index0JS Constant Definitions@>=
@<Server Port Assignment@>
@

@<Server Port Assignment@>=
/*********************
  CONSTANTS
 *********************/
@<IndexJS Port Assignment@>
@

@node Makefile Additions
@subsection Makefile Additions for @file{index.js}

@<Makefile Filename Definitions Hook@>=
INDEXJS := index.js
@

@<Makefile Create Files Targets@>=
${INDEXJS} : | ${ROOT}
@

@node Run IndexJS
@subsection Run @file{index.js}
@cindex index.js, run

@<Makefile Run Hooks@>=
.Phony : server-start
server-start :
	cd ${ROOT} && node ${INDEXJS} &

@

@node Route Handlers
@section Express Route Handlers
@cindex route handlers, express
@cindex express route handlers

This section will analyze the @code{app.get} from above.

@table @code
@item app
Express App to register this route handler with

@item get
Watch for incoming requests with this method; other methods could be: 

@itemize
@item
get: get info

@item
post: send info

@item
put: update all properties

@item
delete: delete info

@item
patch: update one or two properties
@end itemize

@item '/'
Watch for requests trying to access the '/' route; could have a
different route, such as '/greeting';

@item req
Object representing the incoming request

@item res
Object representing the outgoing response

@item res.send()
Immediate send some JSON back to whomever made this request
@end table

@node Heroku Deployment
@section Heroku Deployment
@cindex Heroku deployment
@cindex heroku deployment
@cindex deployment, Heroku

This section will be about deploying our application to the Internet via
Heroku, making changes, then redeploying the changes.

@url{https://www.heroku.com, Heroku}

Deployment occurs in two phases, outlined below.  The steps involve,
first, getting signed up to Heroku, installing Heroku's command-line
interface (CLI), creating an app on Heroku, then sending your app's code
to Heroku, at which time Heroku assembles the app and deploys it; then
second, making changes to your app's code, and redeploying to Heroku.

@subheading Deployment Cycles

@itemize
@item
First Time Deploy

@itemize
@item
Create Heroku account; @xref{Heroku Account}

@item
Commit codebase to Git; @xref{Commit to Git}

@item
Install Heroku CLI and create Heroku app; @xref{Install Heroku CLI}

@item
Deploy Heroku app with Git; @xref{Deploying to Heroku}

@item
Heroku deploys project
@end itemize

@item
Subsequent Deploys; @xref{Subsequent Deployment}

@itemize
@item
Commit modified codebase to Git

@item
Deploy modified Heroku App
@end itemize
@end itemize

@node Preparing for Deployment
@subsection Preparing for Deployment
@cindex deployment preparation
@vindex PORT
@cindex dynamic port binding
@cindex port assignment

Preparing for deployment means providing the information that Heroku
will need in order to get the app up and running, such as port
information, the app's runtime environment (required versions of Node
and NPM), the app's entry point, and so forth.

Preparing for deployment also involves obtaining Heroku's command-line
interface for communicating with Heroku from the command-line, which
allows you to log into Heroku, create an app on Heroku, and send code to
the app on Heroku.

@table @b
@item Dynamic Port Binding
Heroku dynamically assigns a port on which our app will listen, so we need
to incorporate that port assignment into our app using an environment
variable that Heroku uses: @samp{process.env.PORT}; in the alternative,
we can use a default port assignment, such as 5000, if we are deploying
locally. 

@<IndexJS Port Assignment@>=
const PORT = process.env.PORT || 5000;
@

@item Specify Node Environment
@cindex node environment
@cindex environment, node
@cindex engines, node and npm
We want to use a specific version of Node, so we need to tell Heroku
which version we want; by default, Heroku uses an older version of Node
which would not be compatible with what this app will be doing.

This is done by adding an @samp{engines} attribute to the
@file{package.json} file, which specify the Node and NPM versions that
we want Heroku to use.  The code should read:

@example
"engines": @{
  "node": "8.1.1",
  "npm": "5.0.3"
@},
@end example

@xref{Sed Utility} and
@pxref{Makefile Sed Utility Additions}

@item Specify Start Script
@cindex start script
Instruct Heroku what command to run to start our server running

Delete the @samp{test} script, and replace it with:

@example
"scripts": @{
  "start": "node index.js"
@},
@end example

@item Craete .gitignore File
@cindex .gitignore file, Heroku

We don't want to include dependencies; Heroku will do that for us 

Add @file{node_modules} to the project's @file{.gitignore} file.
@xref{Heroku Gitignore File}
@end table

@node Sed Utility
@subsubsection Sed Utility

There does not seem to be any easy way to either set up a default
@file{engines} attribute using @code{npm init} or to edit the code using
@file{npm}, so I am here creating a little utility @file{sed} script to
insert the @code{engines} attributes and also change the @file{scripts}
attribute (described next).  This script is deleted by @file{make} after
it has done its work.  The script is called by @file{make} after
@file{npm} initializes and has created the @file{package.json} file.

@subsubheading Sed Utility for Engines Addition

@(util.sed@)=
/scripts/i\
\ \ "engines": {\
\ \ \ \ "node": "8.1.1",\
\ \ \ \ "npm": "5.0.3"\
\ \ },

@

@subsubheading Sed Utility for Scripts Start Addition

@(util.sed@)=
/test/c\
\ \ \ \ "start": "node index.js"

@

@node Makefile Sed Utility Additions
@subsubsection Makefile Sed Utility Additions

@<Makefile NPM Init Hook@>=
	sed -i '' -f util.sed ${ROOT}/package.json && rm util.sed
@

@node Heroku Gitignore File
@subsubsection Heroku .gitignore File

@(gitignore@)=
node_modules
@

@<Makefile Move Hook@>=
	mv gitignore ${ROOT}/.gitignore
@

@<Makefile Clean Hook@>=
	rm -f gitignore
	rm -f *.sed
@

@node Interacting with Heroku
@subsection Interacting with Heroku
@cindex Heroku CLI
@cindex heroku CLI
@cindex interacting with Heroku

@subsubheading Sign Up for Heroku Account
@anchor{Heroku Account}

This section is about deploying to Heroku for the first time.  The first
step is to create a Heroku account.  Go to @url{https://www.heroku.com}
and sign up for a free account.  Then, sign into that account.

@subsubheading Commit Codebase to Git
@anchor{Commit to Git}

By default, Heroku uses a @dfn{Git-based deployment workflow}.  All that
we have to do is commit our codebase to Git.

@subsubheading Create Local Repository and Add Code

@<Makefile Git Targets@>=
.Phony : git-init
git-init :
	cd ${ROOT} && git init && git add . && git commit -m "Initial commit"
@

@example
git add .
git commit -m "initial commit"
@end example

@subsubheading Install Heroku CLI
@anchor{Install Heroku CLI}

The Heroku CLI will allow us to create a brand new application on Heroku
from the command line.  Go to
@url{https://devcenter.heroku.com/articles/heroku-cli}.  Install the
Heroku CLI: @file{heroku}.  You should be able to obtain an answer to
the query @code{heroku --version}, such as

@verb{|heroku-cli/6.14.39-addc925 (darwin-x64) node-v9.2.0|}

@node Deploying to Heroku
@subsection Deploying to Heroku
@cindex Heroku deployment
@cindex heroku deployment
@cindex deploy
@cindex deployment, Heroku

Will now create a new Heroku app using the Heroku CLI.  This involves
logging into Heroku from its CLI (@code{heroku login)}, creating an app
on Heroku (@code{heroku create)}, receiving connection information
(deployment target and repo url), creating a remote @file{heroku} Git
branch, and finally pushing our local app to the Heroku Git repository
on a Heroku branch (@code{git push heroku master)}.

Heroku should automatically deploy the app when it receives the pushed
local repo.

@subheading Login to Heroku

Type on the command-line: @code{heroku login}

Now enter your Heroku credentials: @samp{email} and @samp{password}. 
This will start the Heroku CLI and place you at its prompt.

@subheading Create Heroku App

Type at the command-line:

@code{heroku create}

Heroku will process the command and produce two links.

@enumerate
@item
@cindex heroku app url
The new app's URL,
e.g. @indicateurl{https://agile-bayou-65260.herokuapp.com/}

@item
@cindex deployment target
Our @dfn{deployment target}, a Git repo that we can push our local
server to,
e.g. @indicateurl{https://git.heroku.com/agile-bayou-65260.git}; when
Heroku receives our pushed app's repo, it will deploy it.

@item
Add @file{remote} Heroku branch to Git:@* @code{git remote add heroku
https://git.heroku.com/agile-bayou-65260.git}
@end enumerate

@subheading Deploy App to Heroku

Type at the command-line:

@code{git push heroku master}

Heroku should indicate that it is processing the information and
deploying the app using Node.  Now open the app by typing:

@code{heroku open}

@node Subsequent Deployment
@subsection Subsequent Deployment
@cindex deployment, subsequent
@cindex deployments, followup
@cindex redployment
@cindex updated codebase, deployment

Subsequent deployments to Heroku involve making changes to your app's
code base, commiting the changes to Heroku, and pushing those changes to
Heroku.  Heroku will recompile and redeploy when it receives the updated
code.

@enumerate
@item
Make changes to codebase

@item
Commit codebase to Git

@example
git add .
git commit -m "message"
@end example

@item
Push updated codebase to Heroku

@example
git push heroku master
@end example

@end enumerate

Heroku will take the changes and redeploy.

@node Authentication
@chapter Authentication with Google OAuth
@cindex oauth
@cindex OAuth
@cindex authentication

This is the first step in how a User will interact with this
application.  This is a completely server-side feature.

@node Intro to Google OAuth
@section Introduction to Google OAuth
@cindex oauth, introduction
@cindex OAuth, introduction

On the surface, OAuth will start with a button that says @samp{Sign in
with Google}.  This system uses the OAuth certification process, which
we can tap into.

@node OAuth Flow
@section The OAuth Flow
@cindex oauth flow
@cindex OAuth flow

@itemize
@item
Client

@itemize
@item
User clicks ``login''

@item
User is directored to @url{localhost:5000/auth/google} (on the server);
this is an arbitrary name; nothing inherently important about the name.

@item
User's browser receives cookie from server and is kicked back to
localhost:3000 and is logged in

@item
User requests some resources from the server API
@end itemize

@item
Server

@itemize
@item
The server receives and forwards the User's request on to Google to
allow the User to grant Google permission to reveal the User's information
to the application; the server sends along an @samp{app id} to Google:
@url{google.com/auth?appId=123}

@item
The server receives a code from Google's redirect as a parameter:
@url{localhost:5000/auth/google/callback?code=456}

@item
The server sends the request back to Google with @samp{code} and its
value included;

@item
The server receives details about the User from Google and creates a new
record in its database

@item
Sends a User ID in a cookie for this User

@item
The server receives a request from the User with a cookie that has the User
ID 
@end itemize

@item
Google

@itemize
@item
Google receives User's request and asks the User if s/he grants
permission

@item
User grants permission

@item
Google then redirects back to the server at
@url{localhost:5000/auth/google/callback?code=456}; this redirect URL is
again not inherently important; what is important is the parameter
@samp{code} and its value;

@item
Google receives 2nd request from the server with @samp{code} in the URL
and replies with details about this user;
@end itemize

@end itemize

@node PassportJS
@section PassportJS
@cindex passportjs, overview

@url{https://passportjs.org}

Will be using a helper library called @file{PassportJS} to create the
OAuth authentication flow.  This library encapsulates many of the steps
outlined in the flow in the previous section:

@node PassportJS Overview
@subsection PassportJS Overview
@cindex passportjs overview

@subheading On the server side, it encapsulates the following:

@itemize
@item
Forward User's initial request to Google

@item
Receive Google's initial response with an authorization code

@item
Forward User's authenticated request back to Google
@end itemize

@subheading On Google's side, it encapsulates every step:

@itemize
@item
Receive initial request from the server and asks User if s/he grants
permission for it to reveal the User's information

@item
Returns a code to the server indicating that the User has authorized it
to reveal information

@item
Receives second request with authorization from the server, and reveals
the requested User's information
@end itemize

@node Passport Library Components
@subsection Passport Library Components
@cindex passportjs library components

@table @strong
@item passport
General helpers for handling auth in Express apps

@item passport strategy
Helpers for authenticating with one very specific method
(email/password, Google, Facebook, etc)
@end table

Passport utilizes different @samp{strategies} to authenticate with
specific organizations.  Learning how to utilize one strategy will make
utilizing other strategies easy.

@node Passport Setup
@subsection Passport Setup
@cindex passport setup

Will be installing PassportJs, the Google strategy, and wiring them up
to our application.

@subsubheading Install PassportJS and Its Google Strategy

@<Makefile NPM Install Hook@>=
	cd ${ROOT} && npm install passport passport-google-oauth20
@

@node Incorporate Passport into IndexJS
@subsection Incorporate Passport into IndexJS
@cindex passport and index.js
@cindex index.js and passport

The file @file{index.js}, our @samp{server} file for the moment, needs
to be refactored so that it imports the @file{passport} module and also
the Google @file{strategy} code (there are other strategies that we can
use later, such as Facebook and LinkedIn), and then hooks into them.
Because the Google strategy code exports more functions than we need, we
can specifically require only the function that we will be using, in
this case @code{Strategy}.

@<Import Passport@>=
const passport = require('passport');
@

@<Import GoogleStrategy@>=
const GoogleStrategy = require('passport-google-oauth20').Strategy;
@

@subsubheading Google Strategy
@cindex google strategy

The @file{passport} module needs to be given a @dfn{strategy} in order
to work.  At this point, we are using the Google strategy, and so we
will tell @file{passport} to @samp{use} it.  In a future section
(@pxref{Google Strategy Options}) we will give our @samp{GoogleStrategy}
object some configurations options to use, and so to make things simpler
those will be added here at this point, even though we discuss them
later.

@anchor{Use GoogleStrategy Options}
@<Use Passport@>=
/*********************
  PASSPORT
 *********************/
passport.use(
  new GoogleStrategy(
    @<GoogleStrategy Options@>
  )
);

@

@node Refactored IndexJS for Passport
@subsubsection Refactored @file{index.js} for Passport
@cindex index.js refactored for passport

@(index.js@)=
@<Index1JS Requirements@>
@<Index0JS Constant Definitions@>
@<Create App@>
@<Create Second Route Handlers@>
@<Use Passport@>
@<Start App@>
@

@subsubheading IndexJS Requires

@<Index1JS Requirements@>=
@<Index0JS Requirements@>
@<Import Passport@>
@<Import GoogleStrategy@>
@

@node Google OAuth API
@subsection Enable Google OAuth API
@cindex google oauth api
@cindex api, google oauth
@cindex api credential
@cindex google project, create

We need to pass some additional configuration options to the Google
strategy: a @samp{client id} and a @samp{client secret}.  These are
provided to us by Google's OAuth service.  Our application must be
signed up, or registered, with the Google OAuth API.

@subsubheading Create Google Project

Go to @url{https://console.developers.google.com} to create a Google
project to use with authentication.  Create a new project and name it
@samp{emaily-dev}.  Now, do the following things:

@table @strong
@item Enable the Google OAuth API
@itemize
@item
click the button @samp{Enable APIs and Services}

@item
search for @key{google+}

@item
choose @samp{Google+ API}

@item
click @kbd{Enable}
@end itemize

@item Generate an API credential.
@itemize
@item
Click on the button @key{Create credentials};

@item
choose @samp{client id},

@item
then @key{Configure consent screen};

@item
fill out the @samp{Product name} with @samp{emaily-dev}

@item
and click @kbd{Save};

@item
for @samp{Application type}, choose @samp{Web application}

@item
Under @samp{Restrictions},

@table @i
@item Authorized JavaScript origins
@url{http://localhost:5000}

@item Authorized redirect URIs
@url{http://localhost:5000/*}
@end table

@item
Google will present a pop-up with a @samp{Client ID} and a @samp{Client
Secret}; copy these items and save them someplace safe (@pxref{Securing
API Keys}).

@itemize
@item Client ID: 

@item Client Secret: 
@end itemize

@end itemize

@end table

@node Securing API Keys
@unnumberedsubsubsec Securing API Keys
@cindex api keys, securing
@cindex keys
@cindex secret keys
@cindex client secret
@cindex clientSecret
@cindex client id
@cindex clientID

@table @emph
@item clientID
Public token --- identifies our application to Google servers; can share
this with the public

@item clientSecret
Private token --- must keep it hidden from the public
@end table

It is important not to make the client secret a part of a GitHub repo.
At this point, we will implement a short-term solution to keeping the
secret hidden.

@itemize
@item
Create a new folder inside the root folder (@file{server}) and name it
@file{config}

@<Makefile Directory Definitions Hook@>=
CONFIG_DIR := ${SOURCE_DIR}/config
@

@<Makefile Directory Creation Hook@>=
.Phony : ${CONFIG_DIR}
${CONFIG_DIR} : | ${ROOT} ${PREFIX} ${SOURCE_DIR}
	mkdir -p ${CONFIG_DIR}
@

@item
Inside the folder @file{config}, create a file and name it
@file{keys.js}

@<Makefile Filename Definitions Hook@>=
KEYS := keys.js
@

@<Makefile Create Files Targets@>=
${KEYS} : | ${CONFIG_DIR}

@

@<Makefile Move Hook@>=
.Phony : move-keys-to-config
move-keys-to-config : | ${CONFIG_DIR}
	mv ${SOURCE_DIR}/${KEYS} ${CONFIG_DIR}
@

@item
Create inside @file{keys.js} the object named @code{module.exports}

@item
Inside @code{module.exports}, create an attribte called
@code{googleClientID} and make its value the Google client id that was
generated in the last step;

@item
make an attribute called @code{googleClientSecret} make its value the
Google client secret generated in the last step;

@item
never commit the file @file{keys.js} to Git by adding its name to the
@file{.gitignore} file

@end itemize

@subsubheading @file{keys.js} @code{module.exports} Object
@findex keys.js

@(keys.js@)=
module.exports = {
  @<Google Client Secret Keys@>
  @<Google Callback URL@>
}

@

@<Google Client Secret Keys@>=
  googleClientID: process.env.WEB_CLIENT_1_ID,
  googleClientSecret: process.env.WEB_CLIENT_1_SECRET,
@

@subsubheading @file{.gitignore}
@findex .gitignore

@example
keys.js
@end example

@node Google Strategy Options
@subsection Google Strategy Options
@cindex google strategy options

Now that we have the Google API keys, we need to import the keys into
our @file{index.js} file by using the @code{require} keyword and then
pass the keys to our @code{GoogleStrategy} object so it can use them
when authorizing our app with Google.

@<Index1JS Requirements@>=
const keys = require('./src/config/keys');
@

@subsubheading Google Strategy
@cindex callback
@cindex callback route and function
@cindex access token
@cindex token, access

The @code{GoogleStrategy} object needs to know the @code{clientID} and
@code{clientSecret}, as well as a @code{callback} route.  There also
needs to be a @code{callback} function that receives Google's
@code{access token}.  For now, just log the access token in the
callback.  In other words, the @samp{GoogleStrategy} object takes two
parameters, options and callback:

@<Google Callback URL@>=
  googleCallbackURL: '/auth/google/callback'
@

@<GoogleStrategy Options@>=
{
  clientID: keys.googleClientID,
  clientSecret: keys.googleClientSecret,
  callbackURL: keys.googleCallbackURL
}, (accessToken) => {
  console.log(accessToken);
}
@

@xref{Use GoogleStrategy Options}

@node OAuth Route Handler
@subsection Google OAuth Route Handler
@cindex google oauth route handler
@cindex route handler, google oauth

When a User clicks @key{Login}, a route handler should direct that User
to the Google OAuth authorization mechanism, which is managed by
@file{PassportJS}.  Therefore, we need to create a route handler to
handle this event.  The callback function will utilize the
@file{passport} functionality.

@<Create Second Route Handlers@>=
@<Create Initial Route Handlers@>
app.get(
  '/auth/google',
  passport.authenticate('google, {
    scope: ['profile', 'email']
  })
);
@

@node Testing OAuth
@subsection Testing OAuth
@cindex oauth testing

@node MongoDB
@chapter Adding MongoDB
@cindex mongodb
@cindex MongoDB

@node Environments
@chapter Dev vs Prod Environments
@cindex environemnts, dev vs prod
@cindex dev environment
@cindex prod environment

@node Client
@chapter Moving to the Client Side
@cindex client side

@node Developing Client
@chapter Developing the Client Side
@cindex client, developing

@node Payments
@chapter Handling Payments
@cindex payments, handling

@node Production Routing
@chapter Back-End to Front-End Routing in Production
@cindex routing in production
@cindex production routing
@cindex back-end routing
@cindex front-end routing

@node Mongoose
@chapter Mongoose for Survey Creation
@cindex mongoose
@cindex Mongoose

@node Back to Client
@chapter Back to the Client
@cindex client, back to

@node Webhook Data
@chapter Handling Webhook Data
@cindex webhook data

@node Home Stretch
@chapter The Home Stretch
@cindex home stretch

@c ====================
@c APPENDICES
@c ====================

@node Appendix One
@appendix Appendix One

@node Meta Appendix
@appendix Meta (Makefile) Appendix

@node Makefile Definitions
@appendixsec Makefile Initial Definitions

@(Makefile@)=
@<Makefile Constants@>
@<Makefile Default Targets@>
@<Makefile Tangle@>
@<Makefile Weave@>
@<Makefile Info@>
@<Makefile Clean Targets@>
@<Makefile Directory Creation@>
@<Makefile Create Files Targets@>
@<Makefile Move Targets@>
@<Makefile NPM Init Target@>
@<Makefile NPM Install Target@>
@<Makefile Run Hooks@>
@<Makefile Open Browser@>
@<Makefile Server Stop@>
@<Makefile Git Targets@>
@

@node Makefile Constants
@appendixsubsec Makefile Constant Definitions

@<Makefile Constants@>=
@<Makefile Directory Definitions@>
@<Makefile Filename Definitions@>
@

@node Directory Definitions
@appendixsubsubsec Makefile Directory Definitions

@<Makefile Directory Definitions@>=
PREFIX := .
@<Makefile Root Definition@>
SOURCE_DIR := ${PREFIX}/${ROOT}/src
PUBLIC_DIR := ${PREFIX}/${ROOT}/public
HTML_DIR := ${PREFIX}/${ROOT}/html
@<Makefile Directory Definitions Hook@>

@

@node Filename Definitions
@appendixsubsubsec Makefile Filename Definitions

@<Makefile Filename Definitions@>=
FILENAME := nodeWithReact
TWJR_FILENAME := ${FILENAME}.twjr
TEXI_FILENAME := ${FILENAME}.texi
INFO_FILENAME := ${FILENAME}.info
@<Makefile Filename Definitions Hook@>

@

@node Makefile Default Targets
@appendixsubsec Makefile Default Targets

@<Makefile Default Targets@>=
.Phony : all
all : tangle weave move npm-init npm-install git-init server-start open-browser

@

@node Makefile Tangle
@appendixsubsubsec Makefile Tangle

@<Makefile Tangle@>=
.Phony : tangle
tangle :
	jrtangle ${TWJR_FILENAME}

@

@node Makefile Weave
@appendixsubsubsec Meta Weave

@<Makefile Weave@>=
.Phony : weave
weave : ${TEXI_FILENAME}

${TEXI_FILENAME} : ${TWJR_FILENAME}
	jrweave ${TWJR_FILENAME} > ${TEXI_FILENAME}

@

@node Makefile Info
@appendixsubsubsec Makefile Info

@<Makefile Info@>=
.Phony : info
info : ${INFO_FILENAME}

${INFO_FILENAME} : ${TEXI_FILENAME}
	makeinfo ${TEXI_FILENAME}

@

@node Makefile Clean Targets
@appendixsubsec Makefile Clean Targets

@<Makefile Clean Targets@>=
@<Makefile Clean@>
@<Makefile Very Clean@>
@<Makefile Dist Clean@>
@

@node Makefile Clean
@appendixsubsubsec Makefile Clean Definition

@<Makefile Clean@>=
.Phony : clean
clean : server-stop
	rm -f *~
	rm -f *.{texi,aux,cp,log,toc,js}
@<Makefile Clean Hook@>
@

@<Makefile Clean Hook@>=
@

@node Makefile Very Clean
@appendixsubsubsec Makefile Very Clean

@<Makefile Very Clean@>=
.Phony : very-clean
very-clean : clean
	rm -f *.{info,js,html}
	rm -rf ${HTML_DIR}
	find ${PREFIX} -depth 2 -name \*.js -exec rm {} \;

@

@node Makefile Dist Clean
@appendixsubsubsec Makefile Dist Clean

@<Makefile Dist Clean@>=
@<Makefile Dist Clean Default@>
@<Makefile Dist Clean Hook@>
@

@node Makefile Dist Clean Default
@appendixsubsubsec Makefile Dist Clean Default

@<Makefile Dist Clean Default@>=
.Phony : dist-clean
dist-clean : very-clean
	rm -rf ${ROOT}
	rm -rf auto

@

@<Makefile Dist Clean Hook@>=
@

@node Makefile Directory Creation
@appendixsubsec Makefile Directory Creation Targets

@<Makefile Directory Creation@>=
.Phony : ${ROOT}
${ROOT} :
	mkdir -p ${ROOT}

.Phony : ${SOURCE_DIR}
${SOURCE_DIR} :
	mkdir -p ${SOURCE_DIR}

.Phony : ${PUBLIC_DIR}
${PUBLIC_DIR} :
	mkdir -p ${PUBLIC_DIR}

.Phony : ${HTML_DIR}
${HTML_DIR} :
	mkdir -p ${HTML_DIR}

@<Makefile Directory Creation Hook@>

@

@node Makefile Create Files Targets
@appendixsubsec Makefile Create Files Targets

Use this target to add new file definitions

@<Makefile Create Files Targets@>=
@

@node Makefile Move Targets
@appendixsubsec Makefile Move Targets

@<Makefile Move Targets@>=
.Phony : move
move : move-index-to-root move-js-to-source move-html-to-source move-hook \
	move-keys-to-config

@<Makefile Move Index to Root@>
@<Makefile Move JS To Source@>
@<Makefile Move HTML@>

.Phony : move-hook
move-hook :
@<Makefile Move Hook@>
@

@node Makefile Move Index to Root
@appendixsubsubsec Makefile Move Index to Root

@<Makefile Move Index to Root@>=
.Phony : move-index-to-root
move-index-to-root : | ${ROOT}
	find ${PREFIX} -depth 1 -name ${INDEXJS} -exec mv {} ${ROOT} \;

@

@node Makefile Move JS
@appendixsubsubsec Makefile Move JS To Source

@<Makefile Move JS To Source@>=
.Phony : move-js-to-source
move-js-to-source : | ${ROOT} ${SOURCE_DIR}
	find ${PREFIX} -depth 1 -name \*.js -exec mv {} ${SOURCE_DIR} \;

@

@node Makefile Move HTML
@appendixsubsubsec Makefile Move HTML

@<Makefile Move HTML@>=
.Phony : move-html-to-source
move-html-to-source : | ${HTML_DIR}
	find ${PREFIX} -depth 1 -name \*.html -exec mv {} ${HTML_DIR} \;

@

@node Makefile Move Hook
@appendixsubsubsec Makefile Move Hook

Use this hook for moving files to a different directory
than Source; it will execute just prior to the next
code block moving all .js files to Source.

@<Makefile Move Hook@>=
@

@node Makefile NPM Init Target
@appendixsubsec Makefile NPM Init Target

@<Makefile NPM Init Target@>=
.Phony : npm-init
npm-init : package.json

package.json : | ${ROOT}
	cd ${ROOT} && npm init --yes

@<Makefile NPM Init Hook@>

@

@node Makefile NPM Install Target
@appendixsubsec Makefile NPM Install Target

@<Makefile NPM Install Target@>=
.Phony : npm-install
npm-install : npm-init
	cd ${ROOT} && npm install
@<Makefile NPM Install Hook@>

@

@<Makefile Run Hooks@>=
@

@node Makefile Open Browser
@appendixsubsec Makefile Open Browswer

@<Makefile Open Browser@>=
.Phony : open-browser
open-browser :
	open -a Safari "http://localhost:5000"

@

@node Makefile Server Stop
@appendixsubsec Makefile Server Stop

@<Makefile Server Stop@>=
.Phony : server-stop
server-stop :
	PS=$$(ps | grep 'node index.js$$' | cut -d ' ' -f 1); [ $${#PS} -ne 0 ] && kill $${PS} || echo no index.js process to kill

@

@<Makefile Git Targets@>=
@

@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@node File Definitions
@appendixsec Source File Definitions

@print_file_defs

@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs

@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs

@c ====================
@c BIBLIOGRAPHY; INDEX; END
@c ====================

@node Bibliography
@unnumbered Bibliography

@node Concept Index
@unnumbered Index

@node Index
@unnumbered Index

@printindex cp

@bye

@c ====================
@c TODOs
@c ====================

1. Create a script to fill in named variables
1.1 twjr
1.1.1 init [--dir <directory>]
1.1.2 config
1.1.3 weave [--info --pdf --html --xml --docbook]
1.1.4 tangle [--file <filename>]
