\input texinfo @c -*- texinfo -*-

@c ==================================================
@c NAME:    nodeWithReact.twjr
@c VERSION: 2017-12-20 VERSION 0.0.2
@c DESC:    based upon Udemy Node With React---Fullstack Web Development V4
@c BY:      LOLH
@c NOTES:   
@c ==================================================

@c %**start of header
@c edit
@setfilename nodeWithReact.info
@c edit
@settitle Node With React
@c %**end of header

@c ====================
@c texiwebjr specials
@c ====================
@c Changes how xref titles are quoted.
@dquotexrefs

@c Lets braces in index entries work.
@allowindexbraces

@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c ====================
@c DOCUMENT CONSTANTS
@c ====================
@set UPDATE-MONTH DECEMBER, 2017
@set EDITION 0.0.2
@set AUTHOR LOLH
@set TITLE Notes for Node with React---Fullstack Web Development V4
@set SHORTTITLE Node with React
@set SUBTITLE by Stephen Grider
@set COPYRIGHT_YEAR 2017
@set COPYRIGHT_HOLDER LOLH

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook

@c ====================
@c FINALOUT
@c ====================
@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c |@finalout|
@end iftex

@c ====================
@c SUMMARY & COPYRIGHT INFORMATION
@c ====================
@copying
@c insert a short summary describing and identifying this document in a
@c sentence or two, and add the copyright notice and copying permisions

This document is @value{TITLE} @sp 2
This document does @dots{}

Copyright @copyright{} @value{COPYRIGHT_YEAR} LOLH @*
by @value{COPYRIGHT_HOLDER} @*
All Rights Reserved

@quotation
Permission is granted to @dots{}
@end quotation

@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.

@c use @insertcopying later to 'emit' this copying information in a TeX
@c or plain text document; add to the Top node for use in Info or HTML file
@end copying

@c ====================
@c TITLEPAGE, COPYRIGHT PAGE, TOC PAGE, HEADINGS
@c ====================
@titlepage

@title @value{TITLE}
@subtitle @value{SUBTITLE}
@c @subtitle Additional Subtitle
@author @value{AUTHOR}

@c place the copyright information on the backside of the titlepage
@c (printed manual only)
@page
@vskip 0pt plus 1filll
@insertcopying

Published by @dots{}

@end titlepage
@c page numbering and headings start after end of titlepage

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@c TOC in the printed manual
@c consider placing TOC after the main menu
@c consider including summarycontents here or after main menu
@c @summarycontents
@contents

@c ====================
@c TOP NODE, MASTER MENU
@c ====================
@ifnottex
@ifnotdocbook
@ifnotxml
@node Top
@top Node With React

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex

@c ====================
@c START OF BODY
@c ====================

@c Preface and Foreward come right after Top node in 'unnumbered' sections
@c consider commenting out Foreward and Preface
@menu

@detailmenu
 --- The Detailed Node Listing ---

@end detailmenu
@end menu

@node Foreword
@unnumbered Foreword

Foreward text...

@node Preface
@unnumbered Preface

Preface text...

@menu
* Overview::
* Conventions::
* Acknowledgements::
@end menu

@node Overview
@unnumberedsec Overview

Text and chapter by chapter description here.

@node Conventions
@unnumberedsec Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo

@node Acknowledgements
@unnumberedsec Acknowledgements

Acknowledgments here...

@c ====================
@c MAIN BODY NODES
@c ====================

@node Introduction
@unnumbered Introduction

Build and deploy fullstack web apps with NodeJS, React, Redux, Express, and MongoDB.

Course website: @url{https://www.udemy.com/node-with-react-fullstack-web-development/learn/v4/content}

@node About
@unnumberedsec About This Course

Build and deploy fullstack web apps with NodeJS, React, Redux, Express,
and MongoDB.

195 Lectures

25.5 hours of video

@node Description
@unnumberedsec Course Description

Note: This course assumes you've got the basics of React and Redux down.
Check out my course 'Modern React with Redux', its the perfect
preparation!

Go beyond the basics of React and Redux!  This course will teach you to
combine the ultra-popular React, Redux, Express, and MongoDB
technologies to build a fullstack web application.

Advanced Deployment? You will learn it.  Billing/Payments? Included.
Handling Email? Of course!

@subsubheading What Will You Build?

All of my courses are 'learn-by-doing': no boring endless lectures with
Powerpoints, only live, interactive coding examples.  In this course
we'll build one massive web application that profiles the advanced
features of React, Redux, Express, and Mongo.  By putting each concept
into a real app, you'll get a better idea of when to use each unique and
powerful feature.

Build a large feedback-collection app. This mega app will include the
full gamut of features, including everything from authentication to
email handling.  You'll learn how to build an app that can be used to
send mass emails to a big list of users for the purpose of collecting
feedback.  It's my goal to ensure you understand each feature we build
into this app so you can apply them to your own personal or professional
projects in the future.

@subsubheading Here's what we'll learn

@itemize
@item
Learn the architectural considerations of building a full stack app

@item
Connect a front-end Create-React-App server to a NodeJS and Express
backend

@item
Communicate data from your Mongo database to your React application

@item
Understand how to route user requests on the front end with React Router
and on the backend with Express

@item
Build reusable user inputs with Redux Form, complete with navigation

@item
Handle credit cards and receive payments from your users with Stripe

@item
Engage your users with automated emails

@item
Enhance authentication flows in your app with Google OAuth
authentication

@item
Separate production and development resources with advanced API key
handling techniques

@item
Educate your users on how to use your app with custom build landing
pages

@end itemize

I've built the course that I would have wanted to take when I was
learning to build fullstack apps. A course that explains the concepts
and how they're implemented in the best order for you to learn and
deeply understand them.

@subsubheading What am I going to get from this course?

@itemize
@item
Create boilerplate starter projects with React, Redux, Express, and
Mongo

@item
Understand common web technologies and design patterns to connect them
together

@item
Master deployment techniques between the production and development
environments

@item
Make an app with Google OAuth authentication

@item
Learn to effectively create and send emails from a backend server

Accept and process credit card payments from users
@end itemize

@node Course Overview
@chapter Course Overview
@cindex overview

Course Overview

NodeJS version must be at least version 8.1.1.

@node Help
@section How to Get Help
@cindex help

@enumerate
@item
Udemy Discussion Threads

@item
PM Stephen Grider on Udemy

@item
Twitter @url{https://twitter.com/ste_grider}

@item
Official Course Repo GitHub
@enumerate a
@item
@url{https://github.com/StephenGrider/FullstackReactCode/issues}

@item
Poor notifications; use PM or Tweet as well
@end enumerate

@end enumerate

@node Resources
@section Course Resources Document
@cindex resources document

@subheading Course Resources Documents

@url{https://goo.gl/Xv4ZgB}

@subheading Course Diagrams

Can view all course diagrams at GitHub site:

@url{https://github.com/StephenGrider/FullstackReactCode/tree/master/diagrams}

All diagrams are authored by @url{https:www.draw.io/, Draw IO}

@subsubheading How to edit diagrams on own:

@itemize
@item
Go to above GitHub site

@item
open folder containing set of diagrams you want to edit

@item
click on @file{.xml} file

@item
click on @samp{raw} button

@item
copy the URL

@item
go to @url{https://www.draw.io}

@item
on the @samp{Save Diagrams To...} window click @key{Decide later} at the
bottom

@item
click @key{File} @result{} @samp{Import From} @result{} @samp{URL}

@item
paste the link to the XML file
@end itemize


@node Prettier
@section Prettier Setup
@cindex prettier

Optional editor add-on to auto-format your JS code.

@url{https://github.com/prettier/prettier}

@subheading Prettier-js for Emacs

@url{https://github.com/prettier/prettier-emacs}

@file{prettier-js} is a function that formats the current buffer using
@file{prettier}. The package also exports a minor mode that applies
@code{(prettier-js}) on save.

Go to the above web page to review @slanted{configuration}.

@node App Overview
@section App Overview
@cindex overview, app

@heading Feedback Collection Application

marketed to startup owners and product managers.

@subheading Hypothetical Situation

@itemize
@item
Someone uses startup owner's app/service

@item
Startup owner wants feedback

@item
Send customer an email requesting feedback

@item
Get tabulation of results

@item
Make app/server better with feedback
@end itemize

It will be quite diverse in its feature set.  It will send out a lot of
emails to different people.  There should be some kind of billing
feature.  There would also need to be user accounts as well, which
requires authentication.

@node App User Flow
@section App User Flow Walkthrough
@cindex app user flow
@cindex user flow, app

Here is a detailed walk-through of how a use will make use of the
application and a discussion of all the different technologies that will
need to be incorporated into the application.

@enumerate
@item
User signs up via Google OAuth

@item
User pays for email credits via stripe

@item
User creates a new 'campaign'

@item
User enters list of emails to send survey to

@item
We send emails to list of surveyees

@item
Surveyees click on link in email to provide feedback

@item
We tabulate feedback

@item
User can see report of all survey responses
@end enumerate

@node Tech Stack
@section Tech Stack
@cindex tech stack
@cindex stack, tech

@enumerate
@item
Authentication:  Express server + MongoDB + PasportJS

@item
Payment: Stripe + MongoDB

@item
Campaign: React + Redux + Redux Form

@item
Emails: Email provider

@item
Feedback: Email provider, Express, Mongo

@item
Tabulate Feedback: Mongo

@item
Report: Mongo + React + Redux
@end enumerate

@node App Mockups
@section App Mockups
@cindex mockups, app
@cindex app mockups

@enumerate
@item
Landing Page; app called @samp{Emaily}; will have a Login button, and
some text; not too concerned about styling; focus on functionality.

@item
Login Button: OAuth flow

@item
Results screen of all different campaigns; name of campaign; list of
responses; other buttons for payment;

@item
Credit card payment

@item
Create a new survey (campaign); add information

@item
Review input information; submit
@end enumerate

@node Server
@chapter Server Side Architecture
@cindex server side architecture
@cindex architecture, server

Discussion about @i{how} to write the code to make the application.

Discussion about the tech stack that will be built and how they will all
communicate with each other.  Primary concern of this course is to
provide direction on getting all of these technologies to work
together.  

@node Application Architecture
@section Application Architecture
@cindex architecture, application
@cindex React app
@cindex Mongo database
@cindex Express server
@cindex API
@cindex AJAX
@cindex JSON

@itemize
@item
Browser at domain sends browseree an HTML document and some files that
contain a React application.

@item
React application does not have the data; the data will be stored on a
Mongo database, i.e., surveys and results of surveys.  The problem to be
solved will be how to get the data in the Mongo database into the React
application.

@item
The React app will never communicate directly with MongoDB; instead,
there will be an Express API in between the React app and the Mongo
database.  The API takes in requests from the app, pulls information out
of the database, and sends it to the app.

@item
React and Express communicate solely through HTTP requests (AJAX
requests); each request contains some JSON.

@itemize
@item
React App

@item
HTTP Request/Response

@item
Express/Node API

@item
MongoDB
@end itemize
@end itemize

Will start with the Express Server first.

@node Node and Express
@section Relationship Between Node and Express
@cindex node and express
@cindex express and node

@set PROJECT server

Will start a brand new Node project directory and install Express into
it, and then discuss the differences between Node and Express inside the
project.  The new project directory will be @file{@value{PROJECT}}.  NPM
will create a new @file{package.json} file in the project directory
through the @code{npm init --yes} command.

@node Install Node Project With Express
@subsection Install a New Node Project With Express
@cindex install node project
@cindex node project, install
@cindex express node project

@itemize
@item
Create project directory @file{@value{PROJECT}}

@<Makefile Root Definition@>=
ROOT := server

@

@item
Initialize new Node Project: @code{npm init --yes}

@item
Install @file{express}

@<Makefile NPM Install Hook@>=
.Phony : npm-install-express
npm-install-express : package.json
	cd ${ROOT} && npm install express

@

@end itemize

@node Relationship Between Node and Express
@subsection Relationship Between Node and Express Inside the App
@cindex node and express, relationship
@cindex express and node, relationship
@cindex relationship between node and express

@table @code
@item Node
Javascript runtime used to execute code outside of the browswer;
traditionally, JavaScript code has always been executed inside a web
browser; that is how JavaScript got its start; people wanted to execute
JavaScript code outside the browswer in some other environments; Node
makes that possible.

@item Express
Library that runs in the Node runtime; has helpers (functions) to make
dealing with HTTP traffic easier;
@end table

@subheading How Node and Express Work Together
@cindex port
@cindex HTTP requests
@cindex HTTP responses
@cindex requests
@cindex reponses
@cindex route handlers
@cindex Route Handler

When a server is running, it is looking for HTTP traffic coming in on a
particular @dfn{port}, a door through which HTTP requests can be
routed.  Node listens for traffic on a particular port and then takes
that information and hands it off to @file{express} for help.  Node
actually handles all of the underlying HTTP traffic.

@file{express} then looks at the @dfn{request} and decides what part of
its code will @dfn{handle} or respond to that request.  The coder will
write a collection of @dfn{route handlers} to handle HTTP requests that
are asking for a very particular service.

@itemize
@item
Route Handler #1

@item
Route Handler #2

@item
Route Handler #3
@end itemize

These route handlers then send a @dfn{response} back to Node, and Node
will respond to the incoming HTTP request.

@node Express Apps
@section Generating Express Apps
@cindex express apps
@cindex index.js

Create the root file @file{index.js} in the root directory of the
project: @value{PROJECT}

Import @file{express} library, then create an @samp{application} by
executing the @file{express} code.  That is, inside of a single Node.js
project, there might be several different @file{express} applications.
Executing @file{express} as a function returns a running express app
referenced by the @var{app} variable.

@var{app} is used to set up configuration to listen for incoming HTTP
requests that are being routed from Node to @file{express} and will then
route those requests to different route handlers.  The route handlers
will be associated with the @file{express} @var{app} that we create here.

@(index.js@)=
@<Import Express@>
@<Index JS Constant Definitions@>
@<Create App@>
@<Create Route Handlers@>
@<Start App@>
@

@<Create App@>=
const app = express();

@

This code tells Node that the application wants to receive requests
coming in from port 5000.

@<Start App@>=
app.listen(PORT);

@

@subheading Create the first Route Handler in @var{app}

@<Create Route Handlers@>=
@<Root Route Handler@>
@

@<Root Route Handler@>=
app.get('/', (req, res) => {
  res.send({hi: 'there' });
});

@

@node Express
@subsection Express
@cindex express

Will be using @dfn{common js modules} on the server side because at this
time Node only has support for this, and not @dfn{ES2015} modules using
the @code{import @dots{} from <module>} syntax.  The front end (React
side), we can use @samp{ES2015} modules, however.

@<Import Express@>=
const express = require('express');
@

@node Index JS Constants
@subsection @file{index.js} Constant Definitions
@cindex constant definitions

@<Index JS Constant Definitions@>=
@<Index JS Port Assignment@>
@

@node Makefile Additions
@subsection Makefile Additions for @file{index.js}

@<Makefile Filename Definitions@>=
INDEXJS := index.js

@

@<Makefile Create Files Targets@>=
${INDEXJS} : | ${ROOT}
@

@<Makefile Move Hook@>=
.Phony : move-index.js
move-index.js : | ${INDEXJS}
	mv -f ${INDEXJS} ${ROOT}

@

@node Run IndexJS
@subsection Run @file{index.js}
@cindex index.js, run

@<Makefile Run Hooks@>=
.Phony : run-index.js
run-index.js :
	cd ${ROOT} && node ${INDEXJS}

@

@node Route Handlers
@section Express Route Handlers
@cindex route handlers, express
@cindex express route handlers

This section will analyze the @code{app.get} from above.

@table @code
@item app
Express App to register this route handler with

@item get
Watch for incoming requests with this method; other methods could be: 

@itemize
@item
get: get info

@item
post: send info

@item
put: update all properties

@item
delete: delete info

@item
patch: update one or two properties
@end itemize

@item '/'
Watch for requests trying to access the '/' route; could have a
different route, such as '/greeting';

@item req
Object representing the incoming request

@item res
Object representing the outgoing response

@item res.send()
Immediate send some JSON back to whomever made this request
@end table


@node Heroku Deployment
@section Heroku Deployment Checklist
@cindex Heroku deployment
@cindex heroku deployment
@cindex deployment, Heroku

This section will be about deploying our application to the Internet via
Heroku, making changes, then redeploying the changes.

@url{https://www.heroku.com, Herokum}

@subheading Deployment Checklist

@itemize
@item
First Time Deploy

@itemize
@item
Create Heroku accoutn

@item
Commit codebase to Git

@item
Install Heroku CLI and create Heroku app

@item
Deploy Heroku app with Git

@item
Heroku deploys project
@end itemize
@item
Subsequent Deploys
@itemize
@item
Commit modified codebase to Git

@item
Deploy modified Heroku App
@end itemize
@end itemize

@node Deployment Checklist
@subsection Deployment Checklist
@cindex deployment checklist

@table @b
@item Dynamic Port Binding
Heroku tells us which port our app will use, se we need to make sure we
listen to the port they tell us to; if we are running in a development
environment, then we can leave this variable unassigned, and it will use
5000 by default.

@<Index JS Port Assignment@>=
const PORT = process.env.PORT | 5000;

@

@item Specify Node Environment
We want to use a specific version of Node, so we need to tell Heroku
which version we want

@item Specify Start Script
Instruct Heroku what command to run to start our server running

@item Craete .gitignore File
We don't want to include dependencies; Heroku will do that for us 
@end table

@node Subsequent Deployment
@subsection Subsequent Deployment
@cindex deployment, subsequent

@node Heroku CLI
@section Installing the Heroku CLI
@cindex Heroku CLI
@cindex heroku CLI

@node Verifying Deployment
@section Verifying Heroku Deployment
@cindex Heroku deployment, verifying
@cindex heroku deployment, verifying
@cindex deployment, verifying

@node Followup Deployments
@section Followup Deployments
@cindex deployments, followup

@node Authentication
@chapter Authentication with Google OAuth
@cindex oauth
@cindex OAuth

@node MongoDB
@chapter Adding MongoDB
@cindex mongodb
@cindex MongoDB

@node Environments
@chapter Dev vs Prod Environments
@cindex environemnts, dev vs prod
@cindex dev environment
@cindex prod environment

@node Client
@chapter Moving to the Client Side
@cindex client side

@node Developing Client
@chapter Developing the Client Side
@cindex client, developing

@node Payments
@chapter Handling Payments
@cindex payments, handling

@node Production Routing
@chapter Back-End to Front-End Routing in Production
@cindex routing in production
@cindex production routing
@cindex back-end routing
@cindex front-end routing

@node Mongoose
@chapter Mongoose for Survey Creation
@cindex mongoose
@cindex Mongoose

@node Back to Client
@chapter Back to the Client
@cindex client, back to

@node Webhook Data
@chapter Handling Webhook Data
@cindex webhook data

@node Home Stretch
@chapter The Home Stretch
@cindex home stretch

@c ====================
@c APPENDICES
@c ====================

@node Appendix One
@appendix Appendix One

@node Meta Appendix
@appendix Meta (Makefile) Appendix

@menu
* Makefile::
@end menu

@node Makefile Definitions
@appendixsec Makefile Initial Definitions

@(Makefile@)=
@<Makefile Constants@>
@<Makefile Default Targets@>
@<Makefile Tangle@>
@<Makefile Weave@>
@<Makefile Info@>
@<Makefile Clean Targets@>
@<Makefile Directory Creation@>
@<Makefile Create Files Targets@>
@<Makefile Move Targets@>
@<Makefile NPM Init Target@>
@<Makefile NPM Install Target@>
@<Makefile Run Hooks@>
@

@menu
* Makefile Constants::
* Makefile Default Targets::
* Makefile Tangle::
* Makefile Weave::
* Makefile Info::
* Makefile Clean::
* Makefile Dist Clean::
* Makefile Move Hook::
@end menu

@node Makefile Constants
@appendixsubsec Makefile Constant Definitions

@<Makefile Constants@>=
@<Makefile Directory Definitions@>
@<Makefile Filename Definitions@>
@

@menu
* Directory Definitions::
* Filename Definitions::
@end menu

@node Directory Definitions
@appendixsubsubsec Makefile Directory Definitions

@<Makefile Directory Definitions@>=
PREFIX := .
@<Makefile Root Definition@>
SOURCE_DIR := ${PREFIX}/${ROOT}/src
PUBLIC_DIR := ${PREFIX}/${ROOT}/public
HTML_DIR := ${PREFIX}/${ROOT}/html

@

@node Filename Definitions
@appendixsubsubsec Makefile Filename Definitions

@<Makefile Filename Definitions@>=
FILENAME := nodeWithReact
TWJR_FILENAME := ${FILENAME}.twjr
TEXI_FILENAME := ${FILENAME}.texi
INFO_FILENAME := ${FILENAME}.info

@

@node Makefile Default Targets
@appendixsubsec Makefile Default Targets

@<Makefile Default Targets@>=
.Phony : all
all : tangle weave move npm-init

@

@node Makefile Tangle
@appendixsubsubsec Makefile Tangle

@<Makefile Tangle@>=
.Phony : tangle
tangle :
	jrtangle ${TWJR_FILENAME}

@

@node Makefile Weave
@appendixsubsubsec Meta Weave

@<Makefile Weave@>=
.Phony : weave
weave : ${TEXI_FILENAME}

${TEXI_FILENAME} : ${TWJR_FILENAME}
	jrweave ${TWJR_FILENAME} > ${TEXI_FILENAME}

@

@node Makefile Info
@appendixsubsubsec Makefile Info

@<Makefile Info@>=
.Phony : info
info : ${INFO_FILENAME}

${INFO_FILENAME} : ${TEXI_FILENAME}
	makeinfo ${TEXI_FILENAME}

@

@node Makefile Clean Targets
@appendixsubsec Makefile Clean Targets

@<Makefile Clean Targets@>=
@<Makefile Clean@>
@<Makefile Dist Clean@>
@

@node Makefile Clean
@appendixsubsubsec Makefile Clean Definition

@<Makefile Clean@>=
.Phony : clean
clean :
	rm -f *~
	rm -f *.{texi,aux,cp,log,toc}

@

@node Makefile Dist Clean
@appendixsubsubsec Makefile Dist Clean

@<Makefile Dist Clean@>=
@<Makefile Dist Clean Default@>
@

@node Makefile Dist Clean Default
@appendixsubsubsec Makefile Dist Clean Default

@<Makefile Dist Clean Default@>=
.Phony : dist-clean
dist-clean : clean
	rm -f *.{texi,info,js,html}
	rm -rf ${SOURCE_DIR}
	RM -rf ${ROOT}

@

@node Makefile Directory Creation
@appendixsubsec Makefile Directory Creation Targets

@<Makefile Directory Creation@>=
.Phony : ${ROOT}
${ROOT} :
	mkdir -p ${ROOT}

.Phony : ${SOURCE_DIR}
${SOURCE_DIR} :
	mkdir -p ${SOURCE_DIR}

.Phony : ${PUBLIC_DIR}
${PUBLIC_DIR} :
	mkdir -p ${PUBLIC_DIR}

.Phony : ${HTML_DIR}
${HTML_DIR} :
	mkdir -p ${HTML_DIR}

@

@node Makefile Create Files Targets
@appendixsubsec Makefile Create Files Targets

Use this target to add new file definitions

@<Makefile Create Files Targets@>=
@

@node Makefile Move Targets
@appendixsubsec Makefile Move Targets

@<Makefile Move Targets@>=
.Phony : move
move : move-index-to-root move-js-to-source move-html-to-source
@<Makefile Move Hook@>
@

@node Makefile Move Hook
@appendixsubsubsec Makefile Move Hook

Use this hook for moving files to a different directory
than Source; it will execute just prior to the next
code block moving all .js files to Source.

@<Makefile Move Hook@>=
@<Makefile Move Index to Root@>
@<Makefile Move JS To Source@>
@<Makefile Move HTML@>
@

@node Makefile Move Index to Root
@appendixsubsubsec Makefile Move Index to Root

@<Makefile Move Index to Root@>=
.Phony : move-index-to-root
move-index-to-root : | ${ROOT}
	find ${PREFIX} -depth 1 -name ${INDEXJS} -exec mv {} ${ROOT} \;

@

@node Makefile Move JS
@appendixsubsubsec Makefile Move JS To Source

@<Makefile Move JS To Source@>=
.Phony : move-js-to-source
move-js-to-source : | ${ROOT} ${SOURCE_DIR}
	find ${PREFIX} -depth 1 -name \*.js -exec mv {} ${SOURCE_DIR} \;

@

@node Makefile Move HTML
@appendixsubsubsec Makefile Move HTML

@<Makefile Move HTML@>=
.Phony : move-html-to-source
move-html-to-source : | ${HTML_DIR}
	find ${PREFIX} -depth 1 -name \*.html -exec mv {} ${HTML_DIR} \;

@

@node Makefile NPM Init Target
@appendixsubsec Makefile NPM Init Target

@<Makefile NPM Init Target@>=
.Phony : npm-init
npm-init : package.json

package.json : | ${ROOT}
	cd ${ROOT} && npm init --yes

@

@node Makefile NPM Install Target
@appendixsubsec Makefile NPM Install Target

@<Makefile NPM Install Target@>=
@<Makefile NPM Install Hook@>
@

@<Makefile Run Hooks@>=
@

@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@menu
* File Definitions::
* Code Chunk Definitions::
* Code Chunk References::
@end menu

@node File Definitions
@appendixsec Source File Definitions

@print_file_defs

@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs

@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs

@c ====================
@c BIBLIOGRAPHY; INDEX; END
@c ====================

@node Bibliography
@unnumbered Bibliography

@node Concept Index
@unnumbered Index

@node Index
@unnumbered Index

@printindex cp

@bye

@c ====================
@c TODOs
@c ====================

1. Create a script to fill in named variables
1.1 twjr
1.1.1 init [--dir <directory>]
1.1.2 config
1.1.3 weave [--info --pdf --html --xml --docbook]
1.1.4 tangle [--file <filename>]
